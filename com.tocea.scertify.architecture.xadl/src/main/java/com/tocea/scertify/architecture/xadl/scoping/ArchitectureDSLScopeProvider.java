/*
 * generated by Xtext
 */
package com.tocea.scertify.architecture.xadl.scoping;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.FilteringScope;
import org.eclipse.xtext.xbase.scoping.XbaseScopeProvider;

import com.google.common.base.Predicate;
import com.tocea.scertify.architecture.xadl.architectureDSL.ArchitectureDSLPackage;
import com.tocea.scertify.architecture.xadl.architectureDSL.Parameter;
import com.tocea.scertify.architecture.xadl.architectureDSL.Type;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
@SuppressWarnings("restriction")
public class ArchitectureDSLScopeProvider extends XbaseScopeProvider {

	@Override
	public IScope getScope(EObject context, EReference reference) {
		IScope scope = super.getScope(context, reference);
		if (reference == ArchitectureDSLPackage.Literals.TYPE_REFERENCE__REFERENCE) {
			final Type type = getNearestType(context);
			return new FilteringScope(scope,
					new Predicate<IEObjectDescription>() {
						@Override
						public boolean apply(IEObjectDescription input) {
							EObject object = input.getEObjectOrProxy();
							if (object instanceof Parameter) {
								return object.eContainer() == type;
							}
							return input != null;
						}
					});

		}
		return scope;
	}

	private static Type getNearestType(EObject context) {
		if (context == null || context instanceof Type)
			return (Type) context;
		return getNearestType(context.eContainer());
	}

}
