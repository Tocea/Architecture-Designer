/*
 * generated by Xtext
 */
package com.tocea.codewatch.architecture.query.dsl.scoping;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.MapBasedScope;
import org.eclipse.xtext.xbase.scoping.LocalVariableScopeContext;
import org.eclipse.xtext.xbase.scoping.XbaseScopeProvider;

import com.google.common.collect.Lists;
import com.tocea.codewatch.architecture.query.dsl.queryDsl.Query;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
@SuppressWarnings("restriction")
public class QueryDslScopeProvider extends XbaseScopeProvider {

	@Override
	protected IScope createLocalVarScope(IScope parentScope,
			LocalVariableScopeContext scopeContext) {

		IScope createLocalVarScope = super.createLocalVarScope(parentScope,
				scopeContext);
		Query type = getQuery(scopeContext.getContext());
		if (type != null) {
			if (!type.getParameters().isEmpty()) {
				List<IEObjectDescription> descriptions = Lists.newArrayList();
				for (JvmFormalParameter param : type.getParameters()) {
					QualifiedName qn = QualifiedName.create(param.getName());
					descriptions.add(EObjectDescription.create(qn, param));
				}

				return MapBasedScope.createScope(createLocalVarScope,
						descriptions);
			}
			
		}
		return createLocalVarScope;
	}


	private Query getQuery(EObject o) {
		if (o instanceof Query)
			return (Query) o;
		EObject parent = o.eContainer();
		while (parent != null && !(parent instanceof Query)) {
			parent = parent.eContainer();
		}
		return (Query) parent;
	}

	protected IEObjectDescription createIEObjectDescription(
			JvmFormalParameter jvmFormalParameter) {
		return EObjectDescription.create(
				QualifiedName.create(jvmFormalParameter.getName()),
				jvmFormalParameter, null);
	}

}
