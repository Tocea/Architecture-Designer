/*
 * generated by Xtext
 */
package com.tocea.codewatch.architecture.query.dsl.generator

import com.google.inject.Inject
import com.tocea.codewatch.architecture.query.dsl.queryDsl.Queries
import com.tocea.codewatch.architecture.query.dsl.queryDsl.Query
import java.util.ArrayList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.common.types.JvmType
import org.eclipse.xtext.common.types.JvmTypeReference
import org.eclipse.xtext.generator.AbstractFileSystemAccess
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.xbase.XExpression
import org.eclipse.xtext.xbase.compiler.ImportManager
import org.eclipse.xtext.xbase.compiler.JvmModelGenerator
import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable
import org.eclipse.xtext.xbase.typing.ITypeProvider
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder

class QueryDslGenerator extends JvmModelGenerator implements IGenerator {
	
	@Inject QueryCompiler compiler;
	@Inject extension JvmTypesBuilder;
	@Inject
	private ITypeProvider typeProvider;
//	@Inject ImportManager importManager;
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var Queries queries =  resource.contents.get(0) as Queries
		
		var name = resource.URI.lastSegment.split("\\.").get(0);
		var ImportManager importManager = new ImportManager(true)
		var  types = resource.allContents.filter(typeof(JvmTypeReference)).toSet
		for(JvmTypeReference t: types){
			importManager.addImportFor(t.type)
		}
		var  assignments = resource.allContents.filter(typeof(XExpression)).toSet
		for(XExpression c: assignments){
			val type = typeProvider.getExpectedType(c)
			if(type!=null)
			importManager.addImportFor(type.type)
		}
		var output = "src/"+queries.name.replace(".","/")+"/"
		if(queries.output!=null){
			output = queries.output+"/" +queries.name.replace(".","/")+"/"
		}
		(fsa as AbstractFileSystemAccess).setOutputPath(output);
		fsa.generateFile(name.toFirstUpper+".java",queries.compile(importManager, name));
	}
	
	
	 def  compile(Queries o, ImportManager importManager,String name) '''
	package «o.name»;
	«val contents=o.contents(importManager)»
	 «FOR imp: importManager.imports»
	import «imp»;
	 «ENDFOR»
	 
	 
	
	public class «name.toFirstUpper» {
	 	«FOR q: contents»

	«q»
	 	«ENDFOR»
	}
	 '''
	 
	 def contents(Queries o, ImportManager importManager){
	 	val contents=new ArrayList<CharSequence>
	 	for( q: o.queries){
	 		val appendable = createAppendable(o,importManager)
	 		contents.add(q.compile(importManager,appendable))
	 		importManager.imports.addAll(appendable.imports)
	 	}
		return contents
	 }
	 
	 def  compile(Query o, ImportManager importManager,ITreeAppendable appendable) '''	/**«o.documentation» */	
	 public static  «compiler.getType(o).simpleName» «o.name»(«
            o.parameterList(importManager)») {
		«compiler.compile(o, importManager,appendable)»
	}
    '''
    
    def simpleName(JvmType p,ImportManager manager){
    	return p.simpleName
    }
    
    def parameterList(Query o, ImportManager importManager) {
        o.parameters.map(p| 'final '+p.parameterType.type.simpleName(importManager) 
                        + ' ' + p.name).join(''', ''')
    }
}
