/*
* generated by Xtext
*/

package com.tocea.codewatch.architecture.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class ArchitectureDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ArchitectureExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArchitectureExtension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtensionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cEntitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntitiesExtensionEntityParserRuleCall_2_0 = (RuleCall)cEntitiesAssignment_2.eContents().get(0);
		
		//ArchitectureExtension:
		//	"extension" name=QualifiedName entities+=ExtensionEntity*;
		public ParserRule getRule() { return rule; }

		//"extension" name=QualifiedName entities+=ExtensionEntity*
		public Group getGroup() { return cGroup; }

		//"extension"
		public Keyword getExtensionKeyword_0() { return cExtensionKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//entities+=ExtensionEntity*
		public Assignment getEntitiesAssignment_2() { return cEntitiesAssignment_2; }

		//ExtensionEntity
		public RuleCall getEntitiesExtensionEntityParserRuleCall_2_0() { return cEntitiesExtensionEntityParserRuleCall_2_0; }
	}

	public class ExtensionEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtensionEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRelationshipParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExtensionEntity:
		//	Type | Import | Relationship;
		public ParserRule getRule() { return rule; }

		//Type | Import | Relationship
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//Import
		public RuleCall getImportParserRuleCall_1() { return cImportParserRuleCall_1; }

		//Relationship
		public RuleCall getRelationshipParserRuleCall_2() { return cRelationshipParserRuleCall_2; }
	}

	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Datatype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Datatype:
		//	"datatype" reference=JvmTypeReference ":" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"datatype" reference=JvmTypeReference ":" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"datatype"
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }

		//reference=JvmTypeReference
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//JvmTypeReference
		public RuleCall getReferenceJvmTypeReferenceParserRuleCall_1_0() { return cReferenceJvmTypeReferenceParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard ";";
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParametrizedTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDatatypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimitiveRoleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumerationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Type:
		//	ParametrizedType | Datatype | PrimitiveRole | Enumeration;
		public ParserRule getRule() { return rule; }

		//ParametrizedType | Datatype | PrimitiveRole | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParametrizedType
		public RuleCall getParametrizedTypeParserRuleCall_0() { return cParametrizedTypeParserRuleCall_0; }

		//Datatype
		public RuleCall getDatatypeParserRuleCall_1() { return cDatatypeParserRuleCall_1; }

		//PrimitiveRole
		public RuleCall getPrimitiveRoleParserRuleCall_2() { return cPrimitiveRoleParserRuleCall_2; }

		//Enumeration
		public RuleCall getEnumerationParserRuleCall_3() { return cEnumerationParserRuleCall_3; }
	}

	public class ParametrizedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParametrizedType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRoleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParametrizedType:
		//	Pattern | Role;
		public ParserRule getRule() { return rule; }

		//Pattern | Role
		public Alternatives getAlternatives() { return cAlternatives; }

		//Pattern
		public RuleCall getPatternParserRuleCall_0() { return cPatternParserRuleCall_0; }

		//Role
		public RuleCall getRoleParserRuleCall_1() { return cRoleParserRuleCall_1; }
	}

	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cPatternKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_2_1_0 = (RuleCall)cParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperPatternAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSuperPatternTypeReferenceParserRuleCall_4_1_0 = (RuleCall)cSuperPatternAssignment_4_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Group cGroup_5_0_1 = (Group)cGroup_5_0.eContents().get(1);
		private final Assignment cFieldsAssignment_5_0_1_0 = (Assignment)cGroup_5_0_1.eContents().get(0);
		private final RuleCall cFieldsFieldParserRuleCall_5_0_1_0_0 = (RuleCall)cFieldsAssignment_5_0_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_1_1 = (Keyword)cGroup_5_0_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//Pattern:
		//	abstract?="abstract"? "pattern" name=ID ("<" parameters+=Parameter ("," parameters+=Parameter)* ">")? ("extends"
		//	superPattern=TypeReference)? ("{" (fields+=Field ";")* "}" | ";");
		public ParserRule getRule() { return rule; }

		//abstract?="abstract"? "pattern" name=ID ("<" parameters+=Parameter ("," parameters+=Parameter)* ">")? ("extends"
		//superPattern=TypeReference)? ("{" (fields+=Field ";")* "}" | ";")
		public Group getGroup() { return cGroup; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }

		//"pattern"
		public Keyword getPatternKeyword_1() { return cPatternKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("<" parameters+=Parameter ("," parameters+=Parameter)* ">")?
		public Group getGroup_3() { return cGroup_3; }

		//"<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_0() { return cParametersParameterParserRuleCall_3_1_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_3_2_1() { return cParametersAssignment_3_2_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_2_1_0() { return cParametersParameterParserRuleCall_3_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//("extends" superPattern=TypeReference)?
		public Group getGroup_4() { return cGroup_4; }

		//"extends"
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }

		//superPattern=TypeReference
		public Assignment getSuperPatternAssignment_4_1() { return cSuperPatternAssignment_4_1; }

		//TypeReference
		public RuleCall getSuperPatternTypeReferenceParserRuleCall_4_1_0() { return cSuperPatternTypeReferenceParserRuleCall_4_1_0; }

		//"{" (fields+=Field ";")* "}" | ";"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"{" (fields+=Field ";")* "}"
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0_0() { return cLeftCurlyBracketKeyword_5_0_0; }

		//(fields+=Field ";")*
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }

		//fields+=Field
		public Assignment getFieldsAssignment_5_0_1_0() { return cFieldsAssignment_5_0_1_0; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_5_0_1_0_0() { return cFieldsFieldParserRuleCall_5_0_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_1_1() { return cSemicolonKeyword_5_0_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}

	public class PrimitiveRoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveRole");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimitiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PrimitiveRole:
		//	"primitive" name=ID "for" type=JvmTypeReference ";";
		public ParserRule getRule() { return rule; }

		//"primitive" name=ID "for" type=JvmTypeReference ";"
		public Group getGroup() { return cGroup; }

		//"primitive"
		public Keyword getPrimitiveKeyword_0() { return cPrimitiveKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_3_0() { return cTypeJvmTypeReferenceParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cAbstractAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0_0 = (Keyword)cAbstractAssignment_0_0.eContents().get(0);
		private final Assignment cInheritedAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cInheritedInheritedKeyword_0_1_0 = (Keyword)cInheritedAssignment_0_1.eContents().get(0);
		private final Keyword cRoleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_2_1_0 = (RuleCall)cParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cForKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cElementAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final CrossReference cElementTypeCrossReference_4_0_1_0 = (CrossReference)cElementAssignment_4_0_1.eContents().get(0);
		private final RuleCall cElementTypeQualifiedNameParserRuleCall_4_0_1_0_1 = (RuleCall)cElementTypeCrossReference_4_0_1_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cExtendsKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cSuperRoleAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cSuperRoleTypeReferenceParserRuleCall_4_1_1_0 = (RuleCall)cSuperRoleAssignment_4_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Group cGroup_5_0_1 = (Group)cGroup_5_0.eContents().get(1);
		private final Assignment cFieldsAssignment_5_0_1_0 = (Assignment)cGroup_5_0_1.eContents().get(0);
		private final RuleCall cFieldsFieldParserRuleCall_5_0_1_0_0 = (RuleCall)cFieldsAssignment_5_0_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_1_1 = (Keyword)cGroup_5_0_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//Role:
		//	(abstract?="abstract" | inherited?="inherited")* "role" name=ID ("<" parameters+=Parameter (","
		//	parameters+=Parameter)* ">")? ("for" element=[Type|QualifiedName] | "extends" superRole=TypeReference)? ("{"
		//	(fields+=Field ";")* "}" | ";");
		public ParserRule getRule() { return rule; }

		//(abstract?="abstract" | inherited?="inherited")* "role" name=ID ("<" parameters+=Parameter ("," parameters+=Parameter)*
		//">")? ("for" element=[Type|QualifiedName] | "extends" superRole=TypeReference)? ("{" (fields+=Field ";")* "}" | ";")
		public Group getGroup() { return cGroup; }

		//(abstract?="abstract" | inherited?="inherited")*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//abstract?="abstract"
		public Assignment getAbstractAssignment_0_0() { return cAbstractAssignment_0_0; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_0_0_0() { return cAbstractAbstractKeyword_0_0_0; }

		//inherited?="inherited"
		public Assignment getInheritedAssignment_0_1() { return cInheritedAssignment_0_1; }

		//"inherited"
		public Keyword getInheritedInheritedKeyword_0_1_0() { return cInheritedInheritedKeyword_0_1_0; }

		//"role"
		public Keyword getRoleKeyword_1() { return cRoleKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("<" parameters+=Parameter ("," parameters+=Parameter)* ">")?
		public Group getGroup_3() { return cGroup_3; }

		//"<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_0() { return cParametersParameterParserRuleCall_3_1_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_3_2_1() { return cParametersAssignment_3_2_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_2_1_0() { return cParametersParameterParserRuleCall_3_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//("for" element=[Type|QualifiedName] | "extends" superRole=TypeReference)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"for" element=[Type|QualifiedName]
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"for"
		public Keyword getForKeyword_4_0_0() { return cForKeyword_4_0_0; }

		//element=[Type|QualifiedName]
		public Assignment getElementAssignment_4_0_1() { return cElementAssignment_4_0_1; }

		//[Type|QualifiedName]
		public CrossReference getElementTypeCrossReference_4_0_1_0() { return cElementTypeCrossReference_4_0_1_0; }

		//QualifiedName
		public RuleCall getElementTypeQualifiedNameParserRuleCall_4_0_1_0_1() { return cElementTypeQualifiedNameParserRuleCall_4_0_1_0_1; }

		//"extends" superRole=TypeReference
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"extends"
		public Keyword getExtendsKeyword_4_1_0() { return cExtendsKeyword_4_1_0; }

		//superRole=TypeReference
		public Assignment getSuperRoleAssignment_4_1_1() { return cSuperRoleAssignment_4_1_1; }

		//TypeReference
		public RuleCall getSuperRoleTypeReferenceParserRuleCall_4_1_1_0() { return cSuperRoleTypeReferenceParserRuleCall_4_1_1_0; }

		//"{" (fields+=Field ";")* "}" | ";"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"{" (fields+=Field ";")* "}"
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0_0() { return cLeftCurlyBracketKeyword_5_0_0; }

		//(fields+=Field ";")*
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }

		//fields+=Field
		public Assignment getFieldsAssignment_5_0_1_0() { return cFieldsAssignment_5_0_1_0; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_5_0_1_0_0() { return cFieldsFieldParserRuleCall_5_0_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_1_1() { return cSemicolonKeyword_5_0_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}

	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cRelationshipKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperRelationshipAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperRelationshipRelationshipCrossReference_3_1_0 = (CrossReference)cSuperRelationshipAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperRelationshipRelationshipQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperRelationshipRelationshipCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConstraintsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConstraintsRelationshipConstraintParserRuleCall_4_1_0 = (RuleCall)cConstraintsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cVerticalLineVerticalLineKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cConstraintsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cConstraintsRelationshipConstraintParserRuleCall_4_2_1_0 = (RuleCall)cConstraintsAssignment_4_2_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Group cGroup_5_0_1 = (Group)cGroup_5_0.eContents().get(1);
		private final Assignment cFieldsAssignment_5_0_1_0 = (Assignment)cGroup_5_0_1.eContents().get(0);
		private final RuleCall cFieldsFieldParserRuleCall_5_0_1_0_0 = (RuleCall)cFieldsAssignment_5_0_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_1_1 = (Keyword)cGroup_5_0_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//Relationship:
		//	abstract?="abstract"? "relationship" name=ID ("extends" superRelationship=[Relationship|QualifiedName])? (":"
		//	constraints+=RelationshipConstraint ("||" constraints+=RelationshipConstraint)*)? ("{" (fields+=Field ";")* "}" |
		//	";");
		public ParserRule getRule() { return rule; }

		//abstract?="abstract"? "relationship" name=ID ("extends" superRelationship=[Relationship|QualifiedName])? (":"
		//constraints+=RelationshipConstraint ("||" constraints+=RelationshipConstraint)*)? ("{" (fields+=Field ";")* "}" | ";")
		public Group getGroup() { return cGroup; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }

		//"relationship"
		public Keyword getRelationshipKeyword_1() { return cRelationshipKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" superRelationship=[Relationship|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superRelationship=[Relationship|QualifiedName]
		public Assignment getSuperRelationshipAssignment_3_1() { return cSuperRelationshipAssignment_3_1; }

		//[Relationship|QualifiedName]
		public CrossReference getSuperRelationshipRelationshipCrossReference_3_1_0() { return cSuperRelationshipRelationshipCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getSuperRelationshipRelationshipQualifiedNameParserRuleCall_3_1_0_1() { return cSuperRelationshipRelationshipQualifiedNameParserRuleCall_3_1_0_1; }

		//(":" constraints+=RelationshipConstraint ("||" constraints+=RelationshipConstraint)*)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//constraints+=RelationshipConstraint
		public Assignment getConstraintsAssignment_4_1() { return cConstraintsAssignment_4_1; }

		//RelationshipConstraint
		public RuleCall getConstraintsRelationshipConstraintParserRuleCall_4_1_0() { return cConstraintsRelationshipConstraintParserRuleCall_4_1_0; }

		//("||" constraints+=RelationshipConstraint)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_4_2_0() { return cVerticalLineVerticalLineKeyword_4_2_0; }

		//constraints+=RelationshipConstraint
		public Assignment getConstraintsAssignment_4_2_1() { return cConstraintsAssignment_4_2_1; }

		//RelationshipConstraint
		public RuleCall getConstraintsRelationshipConstraintParserRuleCall_4_2_1_0() { return cConstraintsRelationshipConstraintParserRuleCall_4_2_1_0; }

		//"{" (fields+=Field ";")* "}" | ";"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"{" (fields+=Field ";")* "}"
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0_0() { return cLeftCurlyBracketKeyword_5_0_0; }

		//(fields+=Field ";")*
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }

		//fields+=Field
		public Assignment getFieldsAssignment_5_0_1_0() { return cFieldsAssignment_5_0_1_0; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_5_0_1_0_0() { return cFieldsFieldParserRuleCall_5_0_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_1_1() { return cSemicolonKeyword_5_0_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Parameter:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMandatoryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMandatoryMandatoryKeyword_0_0 = (Keyword)cMandatoryAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cManyAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final Keyword cManyAsteriskKeyword_4_0_0 = (Keyword)cManyAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cLbAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cLbArityParserRuleCall_4_1_1_0 = (RuleCall)cLbAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_4_1_2_0 = (Keyword)cGroup_4_1_2.eContents().get(0);
		private final Assignment cUbAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final RuleCall cUbArityParserRuleCall_4_1_2_1_0 = (RuleCall)cUbAssignment_4_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_1_3 = (Keyword)cGroup_4_1.eContents().get(3);
		
		//Field:
		//	mandatory?="mandatory"? name=ID ":" type=TypeReference (many?="*" | "[" lb=Arity (".." ub=Arity)? "]")?;
		public ParserRule getRule() { return rule; }

		//mandatory?="mandatory"? name=ID ":" type=TypeReference (many?="*" | "[" lb=Arity (".." ub=Arity)? "]")?
		public Group getGroup() { return cGroup; }

		//mandatory?="mandatory"?
		public Assignment getMandatoryAssignment_0() { return cMandatoryAssignment_0; }

		//"mandatory"
		public Keyword getMandatoryMandatoryKeyword_0_0() { return cMandatoryMandatoryKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeReference
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_3_0() { return cTypeTypeReferenceParserRuleCall_3_0; }

		//(many?="*" | "[" lb=Arity (".." ub=Arity)? "]")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//many?="*"
		public Assignment getManyAssignment_4_0() { return cManyAssignment_4_0; }

		//"*"
		public Keyword getManyAsteriskKeyword_4_0_0() { return cManyAsteriskKeyword_4_0_0; }

		//"[" lb=Arity (".." ub=Arity)? "]"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_1_0() { return cLeftSquareBracketKeyword_4_1_0; }

		//lb=Arity
		public Assignment getLbAssignment_4_1_1() { return cLbAssignment_4_1_1; }

		//Arity
		public RuleCall getLbArityParserRuleCall_4_1_1_0() { return cLbArityParserRuleCall_4_1_1_0; }

		//(".." ub=Arity)?
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }

		//".."
		public Keyword getFullStopFullStopKeyword_4_1_2_0() { return cFullStopFullStopKeyword_4_1_2_0; }

		//ub=Arity
		public Assignment getUbAssignment_4_1_2_1() { return cUbAssignment_4_1_2_1; }

		//Arity
		public RuleCall getUbArityParserRuleCall_4_1_2_1_0() { return cUbArityParserRuleCall_4_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_1_3() { return cRightSquareBracketKeyword_4_1_3; }
	}

	public class ArityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnboundAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cUnboundAsteriskKeyword_1_0 = (Keyword)cUnboundAssignment_1.eContents().get(0);
		
		//Arity:
		//	value=INT | unbound?="*";
		public ParserRule getRule() { return rule; }

		//value=INT | unbound?="*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//unbound?="*"
		public Assignment getUnboundAssignment_1() { return cUnboundAssignment_1; }

		//"*"
		public Keyword getUnboundAsteriskKeyword_1_0() { return cUnboundAsteriskKeyword_1_0; }
	}

	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferenceReferencedTypeCrossReference_0_0 = (CrossReference)cReferenceAssignment_0.eContents().get(0);
		private final RuleCall cReferenceReferencedTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cReferenceReferencedTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParametersTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cParametersAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//TypeReference:
		//	reference=[ReferencedType|QualifiedName] ("<" parameters+=TypeReference ("," parameters+=TypeReference)* ">")?;
		public ParserRule getRule() { return rule; }

		//reference=[ReferencedType|QualifiedName] ("<" parameters+=TypeReference ("," parameters+=TypeReference)* ">")?
		public Group getGroup() { return cGroup; }

		//reference=[ReferencedType|QualifiedName]
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }

		//[ReferencedType|QualifiedName]
		public CrossReference getReferenceReferencedTypeCrossReference_0_0() { return cReferenceReferencedTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getReferenceReferencedTypeQualifiedNameParserRuleCall_0_0_1() { return cReferenceReferencedTypeQualifiedNameParserRuleCall_0_0_1; }

		//("<" parameters+=TypeReference ("," parameters+=TypeReference)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//parameters+=TypeReference
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//TypeReference
		public RuleCall getParametersTypeReferenceParserRuleCall_1_1_0() { return cParametersTypeReferenceParserRuleCall_1_1_0; }

		//("," parameters+=TypeReference)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//parameters+=TypeReference
		public Assignment getParametersAssignment_1_2_1() { return cParametersAssignment_1_2_1; }

		//TypeReference
		public RuleCall getParametersTypeReferenceParserRuleCall_1_2_1_0() { return cParametersTypeReferenceParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}

	public class RelationshipConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationshipConstraint");
		private final RuleCall cRelationshipConjunctionConstraintParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RelationshipConstraint:
		//	RelationshipConjunctionConstraint;
		public ParserRule getRule() { return rule; }

		//RelationshipConjunctionConstraint
		public RuleCall getRelationshipConjunctionConstraintParserRuleCall() { return cRelationshipConjunctionConstraintParserRuleCall; }
	}

	public class RelationshipConjunctionConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationshipConjunctionConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstraintsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstraintsRelationshipPrimitiveConstraintParserRuleCall_0_0 = (RuleCall)cConstraintsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstraintsRelationshipPrimitiveConstraintParserRuleCall_1_1_0 = (RuleCall)cConstraintsAssignment_1_1.eContents().get(0);
		
		//RelationshipConjunctionConstraint:
		//	constraints+=RelationshipPrimitiveConstraint ("&&" constraints+=RelationshipPrimitiveConstraint)*;
		public ParserRule getRule() { return rule; }

		//constraints+=RelationshipPrimitiveConstraint ("&&" constraints+=RelationshipPrimitiveConstraint)*
		public Group getGroup() { return cGroup; }

		//constraints+=RelationshipPrimitiveConstraint
		public Assignment getConstraintsAssignment_0() { return cConstraintsAssignment_0; }

		//RelationshipPrimitiveConstraint
		public RuleCall getConstraintsRelationshipPrimitiveConstraintParserRuleCall_0_0() { return cConstraintsRelationshipPrimitiveConstraintParserRuleCall_0_0; }

		//("&&" constraints+=RelationshipPrimitiveConstraint)*
		public Group getGroup_1() { return cGroup_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }

		//constraints+=RelationshipPrimitiveConstraint
		public Assignment getConstraintsAssignment_1_1() { return cConstraintsAssignment_1_1; }

		//RelationshipPrimitiveConstraint
		public RuleCall getConstraintsRelationshipPrimitiveConstraintParserRuleCall_1_1_0() { return cConstraintsRelationshipPrimitiveConstraintParserRuleCall_1_1_0; }
	}

	public class RelationshipPrimitiveConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationshipPrimitiveConstraint");
		private final RuleCall cTypeConstraintParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RelationshipPrimitiveConstraint:
		//	TypeConstraint;
		public ParserRule getRule() { return rule; }

		//TypeConstraint
		public RuleCall getTypeConstraintParserRuleCall() { return cTypeConstraintParserRuleCall; }
	}

	public class TypeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cSourceTypeCrossReference_1_0_0 = (CrossReference)cSourceAssignment_1_0.eContents().get(0);
		private final RuleCall cSourceTypeQualifiedNameParserRuleCall_1_0_0_1 = (RuleCall)cSourceTypeCrossReference_1_0_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final CrossReference cTargetTypeCrossReference_3_0_0 = (CrossReference)cTargetAssignment_3_0.eContents().get(0);
		private final RuleCall cTargetTypeQualifiedNameParserRuleCall_3_0_0_1 = (RuleCall)cTargetTypeCrossReference_3_0_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//TypeConstraint:
		//	{TypeConstraint} (source=[Type|QualifiedName] | "*") "->" (target=[Type|QualifiedName] | "*");
		public ParserRule getRule() { return rule; }

		//{TypeConstraint} (source=[Type|QualifiedName] | "*") "->" (target=[Type|QualifiedName] | "*")
		public Group getGroup() { return cGroup; }

		//{TypeConstraint}
		public Action getTypeConstraintAction_0() { return cTypeConstraintAction_0; }

		//source=[Type|QualifiedName] | "*"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//source=[Type|QualifiedName]
		public Assignment getSourceAssignment_1_0() { return cSourceAssignment_1_0; }

		//[Type|QualifiedName]
		public CrossReference getSourceTypeCrossReference_1_0_0() { return cSourceTypeCrossReference_1_0_0; }

		//QualifiedName
		public RuleCall getSourceTypeQualifiedNameParserRuleCall_1_0_0_1() { return cSourceTypeQualifiedNameParserRuleCall_1_0_0_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//target=[Type|QualifiedName] | "*"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//target=[Type|QualifiedName]
		public Assignment getTargetAssignment_3_0() { return cTargetAssignment_3_0; }

		//[Type|QualifiedName]
		public CrossReference getTargetTypeCrossReference_3_0_0() { return cTargetTypeCrossReference_3_0_0; }

		//QualifiedName
		public RuleCall getTargetTypeQualifiedNameParserRuleCall_3_0_0_1() { return cTargetTypeQualifiedNameParserRuleCall_3_0_0_1; }

		//"*"
		public Keyword getAsteriskKeyword_3_1() { return cAsteriskKeyword_3_1; }
	}

	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsEnumerationElementParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enumeration:
		//	"enumeration" name=ID "{" (elements+=EnumerationElement ","?)* "}";
		public ParserRule getRule() { return rule; }

		//"enumeration" name=ID "{" (elements+=EnumerationElement ","?)* "}"
		public Group getGroup() { return cGroup; }

		//"enumeration"
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(elements+=EnumerationElement ","?)*
		public Group getGroup_3() { return cGroup_3; }

		//elements+=EnumerationElement
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }

		//EnumerationElement
		public RuleCall getElementsEnumerationElementParserRuleCall_3_0_0() { return cElementsEnumerationElementParserRuleCall_3_0_0; }

		//","?
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumerationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationElement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumerationElement:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class NamedEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferencedTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationshipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NamedEntity:
		//	ReferencedType | Relationship;
		public ParserRule getRule() { return rule; }

		//ReferencedType | Relationship
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReferencedType
		public RuleCall getReferencedTypeParserRuleCall_0() { return cReferencedTypeParserRuleCall_0; }

		//Relationship
		public RuleCall getRelationshipParserRuleCall_1() { return cRelationshipParserRuleCall_1; }
	}

	public class ReferencedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferencedType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ReferencedType:
		//	Type | Parameter;
		public ParserRule getRule() { return rule; }

		//Type | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	
	
	private ArchitectureExtensionElements pArchitectureExtension;
	private ExtensionEntityElements pExtensionEntity;
	private DatatypeElements pDatatype;
	private ImportElements pImport;
	private TypeElements pType;
	private ParametrizedTypeElements pParametrizedType;
	private PatternElements pPattern;
	private PrimitiveRoleElements pPrimitiveRole;
	private RoleElements pRole;
	private RelationshipElements pRelationship;
	private ParameterElements pParameter;
	private FieldElements pField;
	private ArityElements pArity;
	private TypeReferenceElements pTypeReference;
	private RelationshipConstraintElements pRelationshipConstraint;
	private RelationshipConjunctionConstraintElements pRelationshipConjunctionConstraint;
	private RelationshipPrimitiveConstraintElements pRelationshipPrimitiveConstraint;
	private TypeConstraintElements pTypeConstraint;
	private EnumerationElements pEnumeration;
	private EnumerationElementElements pEnumerationElement;
	private NamedEntityElements pNamedEntity;
	private ReferencedTypeElements pReferencedType;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public ArchitectureDSLGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.tocea.codewatch.architecture.dsl.ArchitectureDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//ArchitectureExtension:
	//	"extension" name=QualifiedName entities+=ExtensionEntity*;
	public ArchitectureExtensionElements getArchitectureExtensionAccess() {
		return (pArchitectureExtension != null) ? pArchitectureExtension : (pArchitectureExtension = new ArchitectureExtensionElements());
	}
	
	public ParserRule getArchitectureExtensionRule() {
		return getArchitectureExtensionAccess().getRule();
	}

	//ExtensionEntity:
	//	Type | Import | Relationship;
	public ExtensionEntityElements getExtensionEntityAccess() {
		return (pExtensionEntity != null) ? pExtensionEntity : (pExtensionEntity = new ExtensionEntityElements());
	}
	
	public ParserRule getExtensionEntityRule() {
		return getExtensionEntityAccess().getRule();
	}

	//Datatype:
	//	"datatype" reference=JvmTypeReference ":" name=ID ";";
	public DatatypeElements getDatatypeAccess() {
		return (pDatatype != null) ? pDatatype : (pDatatype = new DatatypeElements());
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Type:
	//	ParametrizedType | Datatype | PrimitiveRole | Enumeration;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ParametrizedType:
	//	Pattern | Role;
	public ParametrizedTypeElements getParametrizedTypeAccess() {
		return (pParametrizedType != null) ? pParametrizedType : (pParametrizedType = new ParametrizedTypeElements());
	}
	
	public ParserRule getParametrizedTypeRule() {
		return getParametrizedTypeAccess().getRule();
	}

	//Pattern:
	//	abstract?="abstract"? "pattern" name=ID ("<" parameters+=Parameter ("," parameters+=Parameter)* ">")? ("extends"
	//	superPattern=TypeReference)? ("{" (fields+=Field ";")* "}" | ";");
	public PatternElements getPatternAccess() {
		return (pPattern != null) ? pPattern : (pPattern = new PatternElements());
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}

	//PrimitiveRole:
	//	"primitive" name=ID "for" type=JvmTypeReference ";";
	public PrimitiveRoleElements getPrimitiveRoleAccess() {
		return (pPrimitiveRole != null) ? pPrimitiveRole : (pPrimitiveRole = new PrimitiveRoleElements());
	}
	
	public ParserRule getPrimitiveRoleRule() {
		return getPrimitiveRoleAccess().getRule();
	}

	//Role:
	//	(abstract?="abstract" | inherited?="inherited")* "role" name=ID ("<" parameters+=Parameter (","
	//	parameters+=Parameter)* ">")? ("for" element=[Type|QualifiedName] | "extends" superRole=TypeReference)? ("{"
	//	(fields+=Field ";")* "}" | ";");
	public RoleElements getRoleAccess() {
		return (pRole != null) ? pRole : (pRole = new RoleElements());
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//Relationship:
	//	abstract?="abstract"? "relationship" name=ID ("extends" superRelationship=[Relationship|QualifiedName])? (":"
	//	constraints+=RelationshipConstraint ("||" constraints+=RelationshipConstraint)*)? ("{" (fields+=Field ";")* "}" |
	//	";");
	public RelationshipElements getRelationshipAccess() {
		return (pRelationship != null) ? pRelationship : (pRelationship = new RelationshipElements());
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}

	//Parameter:
	//	name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Field:
	//	mandatory?="mandatory"? name=ID ":" type=TypeReference (many?="*" | "[" lb=Arity (".." ub=Arity)? "]")?;
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Arity:
	//	value=INT | unbound?="*";
	public ArityElements getArityAccess() {
		return (pArity != null) ? pArity : (pArity = new ArityElements());
	}
	
	public ParserRule getArityRule() {
		return getArityAccess().getRule();
	}

	//TypeReference:
	//	reference=[ReferencedType|QualifiedName] ("<" parameters+=TypeReference ("," parameters+=TypeReference)* ">")?;
	public TypeReferenceElements getTypeReferenceAccess() {
		return (pTypeReference != null) ? pTypeReference : (pTypeReference = new TypeReferenceElements());
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}

	//RelationshipConstraint:
	//	RelationshipConjunctionConstraint;
	public RelationshipConstraintElements getRelationshipConstraintAccess() {
		return (pRelationshipConstraint != null) ? pRelationshipConstraint : (pRelationshipConstraint = new RelationshipConstraintElements());
	}
	
	public ParserRule getRelationshipConstraintRule() {
		return getRelationshipConstraintAccess().getRule();
	}

	//RelationshipConjunctionConstraint:
	//	constraints+=RelationshipPrimitiveConstraint ("&&" constraints+=RelationshipPrimitiveConstraint)*;
	public RelationshipConjunctionConstraintElements getRelationshipConjunctionConstraintAccess() {
		return (pRelationshipConjunctionConstraint != null) ? pRelationshipConjunctionConstraint : (pRelationshipConjunctionConstraint = new RelationshipConjunctionConstraintElements());
	}
	
	public ParserRule getRelationshipConjunctionConstraintRule() {
		return getRelationshipConjunctionConstraintAccess().getRule();
	}

	//RelationshipPrimitiveConstraint:
	//	TypeConstraint;
	public RelationshipPrimitiveConstraintElements getRelationshipPrimitiveConstraintAccess() {
		return (pRelationshipPrimitiveConstraint != null) ? pRelationshipPrimitiveConstraint : (pRelationshipPrimitiveConstraint = new RelationshipPrimitiveConstraintElements());
	}
	
	public ParserRule getRelationshipPrimitiveConstraintRule() {
		return getRelationshipPrimitiveConstraintAccess().getRule();
	}

	//TypeConstraint:
	//	{TypeConstraint} (source=[Type|QualifiedName] | "*") "->" (target=[Type|QualifiedName] | "*");
	public TypeConstraintElements getTypeConstraintAccess() {
		return (pTypeConstraint != null) ? pTypeConstraint : (pTypeConstraint = new TypeConstraintElements());
	}
	
	public ParserRule getTypeConstraintRule() {
		return getTypeConstraintAccess().getRule();
	}

	//Enumeration:
	//	"enumeration" name=ID "{" (elements+=EnumerationElement ","?)* "}";
	public EnumerationElements getEnumerationAccess() {
		return (pEnumeration != null) ? pEnumeration : (pEnumeration = new EnumerationElements());
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}

	//EnumerationElement:
	//	name=ID;
	public EnumerationElementElements getEnumerationElementAccess() {
		return (pEnumerationElement != null) ? pEnumerationElement : (pEnumerationElement = new EnumerationElementElements());
	}
	
	public ParserRule getEnumerationElementRule() {
		return getEnumerationElementAccess().getRule();
	}

	//NamedEntity:
	//	ReferencedType | Relationship;
	public NamedEntityElements getNamedEntityAccess() {
		return (pNamedEntity != null) ? pNamedEntity : (pNamedEntity = new NamedEntityElements());
	}
	
	public ParserRule getNamedEntityRule() {
		return getNamedEntityAccess().getRule();
	}

	//ReferencedType:
	//	Type | Parameter;
	public ReferencedTypeElements getReferencedTypeAccess() {
		return (pReferencedType != null) ? pReferencedType : (pReferencedType = new ReferencedTypeElements());
	}
	
	public ParserRule getReferencedTypeRule() {
		return getReferencedTypeAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
